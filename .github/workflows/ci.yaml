name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  Test:
    environment:
      name: production
    runs-on: ubuntu-latest
    name: Build and Test
    # env:
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.2'

      - name: Install poetry
        shell: bash
        run: |
          python -m pip install poetry==1.5.1

      - name: Configure poetry
        shell: bash
        run: |
          python -m poetry config virtualenvs.in-project true

      - name: Cache the virtualenv
        uses: actions/cache@v4
        with:
          path: ./.venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        shell: bash
        run: |
          python -m poetry install --no-root

      # - name: Code quality checks
      #   shell: bash
      #   run: |
      #     poetry run python -m black --check .

      - name: Run unit tests
        shell: bash
        run: |
          poetry run python -m pytest -xvvv tests/

      - name: Create checks.yaml file
        shell: bash
        run: |
          echo "- name: test check" >> checks.yaml
          echo "  url: https://github.com >> checks.yaml
          echo "  retries: 1 >> checks.yaml
          echo "  status_accepted:" >> checks.yaml
          echo "    - 200" >> checks.yaml

      - name: Start application
        shell: bash
        run: |
          # Start the application in the background
          poetry run python src/main.py &
          APP_PID=$!

          # Allow the application some time to start
          sleep 5

          # Check that the application is running
          if ps -p $APP_PID > /dev/null
          then
            echo "Application is up and running"
          else
            echo "Application failed to start"
            exit 1
          fi

          # Shut down the application
          kill $APP_PID

  # Docker-Publish:
  #   needs: Test
  #   environment:
  #     name: production
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: pull git repo
  #       uses: actions/checkout@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  #     - name: Set up Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Build and push
  #       id: docker_build
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         builder: ${{ steps.buildx.outputs.name }}
  #         push: true
  #         tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ip-addr-challenge:latest
  #         cache-from: type=local,src=/tmp/.buildx-cache
  #         cache-to: type=local,dest=/tmp/.buildx-cache

  #     - name: Image digest
  #       run: echo ${{ steps.docker_build.outputs.digest }}
